import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN", "").strip()
ADMIN_ID = os.getenv("ADMIN_ID", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()

# üõ° –ü—Ä–æ–≤–µ—Ä–∫–∞
if not API_TOKEN or not ADMIN_ID:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ API_TOKEN –∏–ª–∏ ADMIN_ID")

ADMIN_ID = int(ADMIN_ID.lstrip("="))

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analyze
@dp.message(F.text.startswith("/analyze"))
async def handle_analyze(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –¢–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–Ω–∞–ª–∏–∑.")
        return
    await message.reply("üìä –ê–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∏—Ç—Å—è –ø–æ–∑–∂–µ ‚Äî –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ polling.")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ polling
async def main():
    print("‚ö° Running polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
